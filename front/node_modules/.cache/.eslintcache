[{"/home/stavatar/IdeaProject/University/lab2SOA/labsoa/src/index.js":"1","/home/stavatar/IdeaProject/University/lab2SOA/labsoa/src/App.js":"2","/home/stavatar/IdeaProject/University/lab2SOA/labsoa/src/components/Forms/CreateForms.js":"3","/home/stavatar/IdeaProject/University/lab2SOA/labsoa/src/components/Header.js":"4","/home/stavatar/IdeaProject/University/lab2SOA/labsoa/src/components/Table/Table.js":"5","/home/stavatar/IdeaProject/University/lab2SOA/labsoa/src/const.js":"6","/home/stavatar/IdeaProject/University/lab2SOA/labsoa/src/apiNet.js":"7","/home/stavatar/IdeaProject/University/lab2SOA/labsoa/src/components/Table/TableTeams.js":"8"},{"size":690,"mtime":1642342828537,"results":"9","hashOfConfig":"10"},{"size":426,"mtime":1639051135681,"results":"11","hashOfConfig":"10"},{"size":6644,"mtime":1639309473468,"results":"12","hashOfConfig":"10"},{"size":2534,"mtime":1639308904312,"results":"13","hashOfConfig":"10"},{"size":19130,"mtime":1644608950303,"results":"14","hashOfConfig":"10"},{"size":165,"mtime":1639308904324,"results":"15","hashOfConfig":"10"},{"size":3076,"mtime":1644616231689,"results":"16","hashOfConfig":"10"},{"size":4671,"mtime":1644170774128,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"14oehrm",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"/home/stavatar/IdeaProject/University/lab2SOA/labsoa/src/index.js",[],["38","39"],"/home/stavatar/IdeaProject/University/lab2SOA/labsoa/src/App.js",[],"/home/stavatar/IdeaProject/University/lab2SOA/labsoa/src/components/Forms/CreateForms.js",["40","41","42","43","44","45","46","47"],"import React, { Component } from 'react';\n    import '../../css/AddForms.css';\nimport {withRouter} from 'react-router-dom';\nimport {addObj} from \"../../apiNet\";\n\nimport {mood,weaponType} from \"../../const\";\n\nclass NameForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '-',\n            impactSpeed:'0',\n            X: '0',\n            Y:'0',\n            mood:'SORROW',\n            weaponType:'HAMMER',\n            realHero:'true',\n            car:'true',\n            hasToothpick: 'true',\n            creationDate:new Date()\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        debugger;\n        switch (event.target.name) {\n            case \"name\":\n                this.setState({name: event.target.value});\n                break;\n            case  \"impactSpeed\":\n                this.setState({impactSpeed : event.target.value});\n                break;\n            case  \"X\":\n                this.setState({X: event.target.value});\n                break;\n            case  \"Y\":\n                this.setState({Y: event.target.value});\n                break;\n            case  \"mood\":\n                this.setState({mood: event.target.value});\n                break;\n            case  \"weaponType\":\n                this.setState({weaponType: event.target.value});\n                break;\n            case  \"realHero\":\n                this.setState({realHero: event.target.checked});\n                break;\n            case  \"hasToothpick\":\n                this.setState({hasToothpick: event.target.checked});\n                break;\n            case  \"car\":\n                this.setState({car: event.target.checked});\n                break;\n        }\n        event.preventDefault();\n    }\n\n    handleSubmit(event) {\n        debugger;\n        if(this.state.hasToothpick===false || this.state.hasToothpick===0){\n            this.setState({hasToothpick: \"false\" });\n            this.state.hasToothpick=\"false\";\n        }\n        if(this.state.hasToothpick===true || this.state.hasToothpick===1){\n            this.setState({hasToothpick: \"true\" });\n            this.state.hasToothpick=\"true\";\n        }\n\n        debugger;\n        if(this.state.car===false || this.state.car===0){\n            this.setState({car: \"false\" });\n            this.state.car=\"false\";\n        }\n        if(this.state.car===true ||this.state.car===1){\n            this.setState({car: \"true\" });\n            this.state.car=\"true\";\n        }\n\n        debugger;\n        if(this.state.realHero===false || this.state.realHero===0){\n            this.setState({realHero: \"false\" });\n            this.state.realHero=\"false\";\n        }\n        if(this.state.realHero===true || this.state.realHero===1){\n            this.setState({realHero: \"true\" });\n            this.state.realHero=\"true\";\n        }\n        debugger;\n        addObj(this.state,this.props.history);\n\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <form className=' container form-control-lg ' onSubmit={this.handleSubmit}>\n                <label className=\"containerLabel\">\n                    <label className=\"item1 text-lg-center\">Имя:</label>\n                    <input  className=\"item2\" name=\"name\" type=\"text\" value={this.state.name} onChange={this.handleChange} />\n                </label>\n                <label className=\"containerLabel\">\n                    <label className=\"item1 text-lg-center\">impactSpeed:</label>\n                    <input className=\"item2\" name=\"impactSpeed\" type=\"number\"  required value={this.state.impactSpeed} onChange={this.handleChange} />\n                </label>\n                <label className=\"containerLabel\">\n                    <label className=\"item1 text-lg-center\">X :</label>\n                    <input className=\"item2\" name=\"X\" type=\"number\" required value={this.state.X} onChange={this.handleChange} />\n                </label>\n                <label className=\"containerLabel\">\n                    <label className=\"item1 text-lg-center\">Y :</label>\n                    <input className=\"item2\" name=\"Y\" type=\"number\" required value={this.state.Y} onChange={this.handleChange} />\n                </label >\n                <label className=\"containerLabel\">\n                    <label className=\"item1 text-lg-center\">mood :</label>\n                    <select className=\"item2\" required name=\"mood\" value={this.state.mood} onChange={this.handleChange}>\n                        {\n                            mood.map(name => (<option key={ name } value={ name }> { name }</option>))\n                        }\n                </select>\n                </label >\n                <label className=\"containerLabel\">\n                    <label className=\"item1 text-lg-center\">weaponType :</label>\n                    <select className=\"item2\" required name=\"weaponType\" value={this.state.weaponType} onChange={this.handleChange}>\n                        {\n                            weaponType.map(name => (<option key={ name } value={ name }> { name }</option>))\n                        }\n                    </select>\n                </label >\n                <label className=\"containerLabel\">\n                    <label className=\"item1 text-lg-center\">realHero :</label>\n                    <input\n                        className=\"checkbox\"\n                        name=\"realHero\"\n                        type=\"checkbox\"\n                        checked={this.state.realHero}\n                        onChange={this.handleChange} />\n                 </label>\n                <label className=\"containerLabel\">\n                    <label className=\"item1 text-lg-center\">car :</label>\n                    <input\n                        className=\"checkbox\"\n                        name=\"car\"\n                        type=\"checkbox\"\n                        checked={this.state.car}\n                        onChange={this.handleChange} />\n                </label>\n                <label className=\"containerLabel\">\n                    <label className=\"item1 text-lg-center\">hasToothpick :</label>\n                    <input\n                        className=\"checkbox\"\n                        name=\"hasToothpick\"\n                        type=\"checkbox\"\n                        checked={this.state.hasToothpick}\n                        onChange={this.handleChange} />\n                </label>\n\n                <input  type=\"submit\" value=\"Отправить\" />\n\n\n            </form>\n        );\n    }\n}\nexport default withRouter(NameForm);\n","/home/stavatar/IdeaProject/University/lab2SOA/labsoa/src/components/Header.js",[],"/home/stavatar/IdeaProject/University/lab2SOA/labsoa/src/components/Table/Table.js",["48"],"import React, { Component } from 'react';\nimport {BootstrapTable,\n    TableHeaderColumn} from 'react-bootstrap-table';\nimport InsertButton from 'react-bootstrap-table/lib/toolbar/InsertButton';\nimport DeleteButton from 'react-bootstrap-table/lib/toolbar/DeleteButton';\nimport '../../css/Table.css';\nimport 'react-bootstrap-table/css/react-bootstrap-table.css'\nimport axios from \"axios\";\nimport {onAfterDeleteRow,sendEditCell,addTeam,makeDepressiveTeam} from \"../../apiNet\"\nimport {withRouter} from \"react-router-dom\";\nimport {path_server} from \"../../apiNet\";\nimport {CNav, CNavItem} from \"@coreui/react\";\nimport ReactPaginate from 'react-paginate';\nimport {mood,weaponType,bool_val} from \"../../const\";\nimport 'react-bootstrap-table/dist/react-bootstrap-table.min.css';\nimport qs from 'qs';\nimport {Button, Modal} from \"react-bootstrap\";\nimport NameForm from \"../Forms/CreateForms\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport TableTeams from \"./TableTeams\";\nimport './../../index.css'\n\nfunction formatterCar(cell, row) {\n    return cell.cool;\n}\n\nfunction formatterX(cell, row) {\n    if (row.coordinates===null || row.coordinates.x===null)\n        return <span>0</span>\n\n    return <span>{row.coordinates.x}</span>\n}\nfunction formatterY(cell, row) {\n    if (row.coordinates===null || row.coordinates.y==null)\n        return <span>0</span>\n    return <span>{row.coordinates.y}</span>\n}\n\n\n\nclass Table extends Component {\n    constructor(props) {\n        super(props);\n        axios.defaults.validateStatus = () => {\n            return true;\n        };\n        this.handlePageClick=this.handlePageClick.bind(this);\n        this.handleChangeSizePage=this.handleChangeSizePage.bind(this);\n        this.handleKeyPress=this.handleKeyPress.bind(this);\n        this.getAllObject=this.getAllObject.bind(this);\n        this.onFilterChange=this.onFilterChange.bind(this);\n        this.onSortChange=this.onSortChange.bind(this);\n        this.handleChangeTeamName=this.handleChangeTeamName.bind(this);\n\n\n        this.onRowSelect=this.onRowSelect.bind(this);\n        this.handleClose=this.handleClose.bind(this);\n        this.handleShow=this.handleShow.bind(this);\n\n        this.handleCloseTeams=this.handleCloseTeams.bind(this);\n        this.handleShowTeam=this.handleShowTeam.bind(this);\n        this.state = {data:[],\n                      sizePage:10,\n                      allSizeList:1,\n                      currentPage:1,\n                      sort:{nameField:'id',isAscending:true},\n                      filter:[],\n                      selectedRow:new Set(),\n                      nameTeam:'',\n                      nameTeamForDepressive:'',\n                      showAdd: false,\n                      showTeams: false,\n                      handleClose:false,\n                      handleCloseTeams:false\n                      } ;\n    }\n    handleChangeTeamName(event){\n        this.setState({nameTeam: event.target.value});\n\n    }\n\n    componentDidMount() {\n        this.getAllObject();\n        this.timer = setInterval(() => this.getAllObject(), 100000);\n\n    }\n    componentWillUnmount() {\n        this.timer = null;\n    }beforeClose(e) {}\n\n\n    handlePageClick (data){\n        let curPage=data.selected+1;\n        this.setState({currentPage:curPage },this.getAllObject);\n    }\n    handleChangeSizePage(event){\n        this.setState({sizePage: event.target.value,currentPage:1 },this.getAllObject);\n        event.preventDefault();\n    }\n    handleKeyPress(event){\n        if (event.key === \"Enter\") {\n            this.getAllObject();\n        }\n        event.preventDefault();\n    }\n    createCustomInsertButton = () => {\n        return (\n            <div className=\"\">\n\n                <div className=\"\">\n                    <label >Name team</label>\n                    <input  type=\"text\" value={this.state.nameTeam} onChange={this.handleChangeTeamName} />\n\n                <InsertButton\n                    className=\"btn-padding-left-top\"\n                    value='Add Command'\n                    size=\"\"\n                    onClick={ () => {\n                                        debugger;\n                                        this.setState(({selectedRow}) => ({selectedRow: new Set()}));\n                                        addTeam(this.state.selectedRow,this.state.nameTeam)\n                                    }\n                            }>Create  team with selected human</InsertButton>\n                </div>\n                <br/>\n\n                <InsertButton\n                    variant=\"primary\"\n                    className=\"btn-padding-left-top\"\n                    value='Create human'\n                    size=\"\"\n                    onClick={ () => {\n                                         debugger;\n                                        this.setState(({selectedRow}) => ({selectedRow: new Set()}));\n                                         this.setState({showAdd : true});\n                                        this.setState({showAdd : true});\n                                        //this.props.history.push(\"/add\")\n                                    }\n                            }>Create  human</InsertButton>\n            </div>\n        );\n    }\n    createCustomDeleteButton = (onClick) => {\n        return (\n            <div className=\"margin\">\n                <InsertButton\n                    variant=\"primary\"\n                    className=\"btn-padding-left-top\"\n                    value='Show teams'\n                    size=\"\"\n                    onClick={ () => {\n                        debugger;\n                        this.setState({showTeams : true});\n                        this.setState({showTeams : true});\n                    }\n                    }>Show teams</InsertButton>\n\n                <DeleteButton\n                    size=\"\"\n                    btnText='Delete selected human'\n                    className=\"btn-padding-left-top\"\n                    onClick={ e => {\n                                        this.setState(({selectedRow}) => ({selectedRow: new Set()}));\n                                        onClick();\n                                    }\n                            }/>\n            </div>\n     )};\n\n    onSortChange = (sortName, sortOrder) => {\n        debugger;\n        let sortFlag = sortOrder===\"asc\";\n        this.setState({sort:{nameField:sortName,isAscending:sortFlag}},this.getAllObject);\n        debugger;\n    }\n\n    onFilterChange(filterObj) {\n        let arr=[];\n        let filterValue;\n        for (const key in filterObj) {\n            let current={nameField:'',action:'',value:''}\n            current.nameField=key;\n            switch (filterObj[key].type) {\n                case 'DateFilter':{\n                    debugger;\n                    let filterValue = filterObj[key].value.date;\n                    current.value=filterValue;\n                    let comparator = filterObj[key].value.comparator;\n                    current.action=comparator;\n                    debugger;\n                    break;\n                }\n                case 'NumberFilter': {\n                    debugger;\n                    let filterValue = filterObj[key].value.number;\n                    current.value=filterValue;\n                    let comparator = filterObj[key].value.comparator;\n                    current.action=comparator;\n                    debugger;\n                    break;\n                }\n                default: {\n                    filterValue = filterObj[key].value;\n                    current.value=filterValue;\n                    debugger;\n                    break;\n                }\n            }\n            arr.push(current);\n            debugger;\n        }\n        this.setState({filter:arr},this.getAllObject);\n    }\n    onAfterSaveCell(row, cellName, cellValue) {\n        debugger;\n        sendEditCell(row, cellName, cellValue)\n\n    }\n    remote(remoteObj) {\n        remoteObj.sort=true;\n        remoteObj.filter=true;\n        return remoteObj;\n    }\n\n    onRowSelect(row, isSelected, e) {\n        debugger;\n        if(isSelected) {\n            this.setState(({selectedRow}) => ({\n                selectedRow: new Set(selectedRow).add(row)\n            }));\n        }\n        else{\n            if(this.state.selectedRow.size<=1){\n                this.setState(({selectedRow}) => ({\n                    selectedRow: new Set()\n                }));\n            }else {\n                new Set(this.state.selectedRow).delete(row);\n                this.setState(({selectedRow}) => ({\n                    selectedRow: new Set(this.state.selectedRow)\n                }));\n            }\n        }\n\n    }\n    handleClose(){\n        this.setState({showAdd:false});\n    }\n    handleShow(){\n        this.setState({showAdd:true});\n    }\n\n    handleCloseTeams(){\n        debugger;\n        this.setState({showTeams:false});\n    }\n    handleShowTeam(){\n        debugger;\n        this.setState({showTeams:true});\n    }\n    render(){\n        const options = {\n            hideSizePerPage: true,\n            sizePerPage: 5,\n            deleteBtn: this.createCustomDeleteButton,\n            insertBtn: this.createCustomInsertButton,\n            onSortChange: this.onSortChange,\n            onFilterChange: this.onFilterChange,\n            afterDeleteRow: onAfterDeleteRow,// A hook for after insert rows\n        };\n        const selectRowProp = {\n            mode: 'checkbox',\n            columnWidth: '2%',\n            onSelect: this.onRowSelect,\n        };\n        const cellEditProp = {\n            mode: 'dbclick', // 'dbclick' for trigger by double-click\n            afterSaveCell: sendEditCell,\n            blurToSave: true\n        }\n\n\n        const currentPage=Math.ceil(this.state.allSizeList/this.state.sizePage);\n        debugger;\n        return (\n                <div>\n                <BootstrapTable\n                                remote\n                                data={this.state.data}\n                                dataField='id'\n                                tdStyle={ { whiteSpace: 'normal' } }\n                                insertRow\n                                cellEdit={cellEditProp}\n                                selectRow={ selectRowProp }\n                                deleteRow={ true }\n                                options={ options }\n                                striped\n                                hover\n                                containerClass='table'\n                                >\n                    <TableHeaderColumn isKey\n                                       dataSort\n                                       dataField='id'\n                                       headerAlign=\"left\"\n                                       width=\"1%\"\n                                       >\n                        ID\n                    </TableHeaderColumn>\n\n                    <TableHeaderColumn dataField='name'\n                                       dataSort\n                                       dataAlign='center'\n                                       headerAlign=\"center\"\n                                       width=\"4%\"\n                                       filter={ { type: 'TextFilter' } }\n                                       >\n                        Name\n                    </TableHeaderColumn>\n                    <TableHeaderColumn dataField='impactSpeed'\n                                       dataSort\n                                       filter={ { type: 'NumberFilter' } }\n                                       dataAlign='center'\n                                       headerAlign=\"center\"\n                                       width=\"5%\"\n\n                                       editable={ { type: 'number' } }>\n                        impactSpeed\n                    </TableHeaderColumn>\n                    <TableHeaderColumn dataField='weaponType'\n                                       dataSort\n                                       dataAlign='center'\n                                       headerAlign=\"center\"\n                                       width=\"5%\"\n                                       filter={ { type: 'SelectFilter', options: weaponType} }\n                                       editable={ { type: 'select', options: { values: weaponType } } }>\n                        weaponType\n                    </TableHeaderColumn>\n                    <TableHeaderColumn dataField='mood'\n                                       dataAlign='center'\n                                       headerAlign=\"center\"\n                                       width=\"5%\"\n                                       dataSort={ true }\n                                       filter={ { type: 'SelectFilter', options: mood} }\n                                       editable={ { type: 'select', options: { values: mood } } }>\n                        moodType\n                    </TableHeaderColumn>\n                    <TableHeaderColumn dataField='X'\n                                       dataAlign='center'\n                                       headerAlign=\"center\"\n                                       width=\"5%\"\n                                       dataSort\n                                       dataFormat={formatterX}\n                                       filter={ { type: 'NumberFilter' } }\n                                       editable={ { type: 'number' }} >\n                        x\n                    </TableHeaderColumn>\n                    <TableHeaderColumn dataField='Y'\n                                       dataAlign='center'\n                                       dataSort\n                                       headerAlign=\"center\"\n                                       width=\"5%\"\n                                       dataFormat={formatterY}\n                                       filter={ { type: 'NumberFilter' } }\n                                       editable={ { type: 'number' , options: { min: '0', max: '369' } } }>\n                        y\n                    </TableHeaderColumn>\n                    <TableHeaderColumn dataField='creationDate'\n                                       dataAlign='center'\n                                       dataSort\n                                       headerAlign=\"center\"\n                                       width=\"7%\"\n                                       editable={ false }\n                                       filter={ { type: 'DateFilter' } }\n                        >\n                        date\n\n                    </TableHeaderColumn>\n\n                    <TableHeaderColumn dataField='realHero'\n                                       dataSort\n                                       dataAlign='center'\n                                       headerAlign=\"center\"\n                                       width=\"2%\"\n                                       filter={ { type: 'SelectFilter', options: bool_val} }\n                                       editable={ { type: 'checkbox'  }}>\n                        R\n                    </TableHeaderColumn>\n                    <TableHeaderColumn dataField='car'\n                                       dataSort\n                                       dataAlign='center'\n                                       headerAlign=\"center\"\n                                       width=\"2%\"\n                                       dataFormat={formatterCar}\n                                       filter={ { type: 'SelectFilter', options: bool_val} }\n                                       editable={ { type: 'checkbox'  }}>\n                        C\n                    </TableHeaderColumn>\n\n\n                </BootstrapTable>\n                    <CNav className=\"background-nav justify-content-lg-between\">\n                        <CNavItem className=\" \">\n                                <input  name=\"sizePage\" type=\"number\" onKeyPress={this.handleKeyPress}   value={this.state.sizePage} onChange={this.handleChangeSizePage} />\n                        </CNavItem>\n                        <CNavItem className=\" \">\n                            <ReactPaginate\n                                previousLabel={\"← Previous\"}\n                                nextLabel={\"Next →\"}\n                                pageCount={currentPage}\n                                onPageChange={this.handlePageClick}\n                                containerClassName={\"pagination\"}\n                                previousLinkClassName={\"pagination__link\"}\n                                nextLinkClassName={\"pagination__link\"}\n                                disabledClassName={\"pagination__link--disabled\"}\n                                activeClassName={\"pagination__link--active\"}\n                            />\n                        </CNavItem>\n                    </CNav>\n                    <Modal show={this.state.showAdd} onHide={this.handleClose} animation={false}>\n                        <Modal.Header closeButton>\n                            <Modal.Title>Modal heading</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <NameForm/>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={this.handleClose}>\n                                Close\n                            </Button>\n                        </Modal.Footer>\n                    </Modal>\n\n                    <Modal size=\"lg\" show={this.state.showTeams} onHide={this.handleCloseTeams} animation={false}>\n                        <Modal.Header closeButton>\n                            <Modal.Title>Modal heading</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <TableTeams/>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={this.handleShowTeam}>\n                                Close\n                            </Button>\n                        </Modal.Footer>\n                    </Modal>\n                </div>\n        );\n    }\n\n    getAllObject() {\n\n        let arr_filt=JSON.stringify(this.state.filter);\n        if(arr_filt==='[]')\n        if(arr_filt==='[]')\n            arr_filt=null;\n\n        axios.get(path_server+\"humanBeings\", {\n            params:\n                {\n                    sizePage: this.state.sizePage,\n                    numberPage: this.state.currentPage,\n                    sortField:this.state.sort.nameField,\n                    isAsc:this.state.sort.isAscending,\n                    filters:arr_filt\n                },\n            paramsSerializer: params => {\n                return qs.stringify(params)\n            }})\n            .then(res => {\n                const msg = res.data;\n                if(msg.code ===1){\n                    let k=msg.data;\n                    this.setState({data: k,allSizeList: msg.allSizeList});\n                }\n            }).catch(err => {\n            // what now?\n            console.log(err);\n        });\n    }\n}\n\nexport default withRouter(Table);","/home/stavatar/IdeaProject/University/lab2SOA/labsoa/src/const.js",[],"/home/stavatar/IdeaProject/University/lab2SOA/labsoa/src/apiNet.js",["49"],"/home/stavatar/IdeaProject/University/lab2SOA/labsoa/src/components/Table/TableTeams.js",["50","51","52","53","54","55","56","57","58","59","60","61","62"],"import React, { Component } from 'react';\nimport {BootstrapTable,\n    TableHeaderColumn} from 'react-bootstrap-table';\nimport InsertButton from 'react-bootstrap-table/lib/toolbar/InsertButton';\nimport DeleteButton from 'react-bootstrap-table/lib/toolbar/DeleteButton';\nimport '../../css/Table.css';\nimport 'react-bootstrap-table/css/react-bootstrap-table.css'\nimport axios from \"axios\";\nimport {onAfterDeleteRow, sendEditCell, addTeam, makeDepressiveTeam, path_server} from \"../../apiNet\"\nimport {withRouter} from \"react-router-dom\";\nimport {path_server2} from \"../../apiNet\";\n\nimport 'react-bootstrap-table/dist/react-bootstrap-table.min.css';\nimport qs from 'qs';\nimport {Button, Modal} from \"react-bootstrap\";\nimport NameForm from \"../Forms/CreateForms\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {CNav, CNavItem} from \"@coreui/react\";\nimport ReactPaginate from \"react-paginate\";\n\n;\nfunction formatterTeam(cell, row) {\n    if (cell===null)\n        return <span>-</span>\n    debugger;\n    return <div>\n        <span>Id: {cell[0].id}</span>\n        <br/>\n        <span>Name: {cell[0].name}</span>\n    </div>\n}\nclass TableTeams extends React.Component{\n    constructor(props) {\n        super(props);\n        debugger;\n        console.log(\"!!!+!+!+!+!+!+!+!+!+!+!+!+!+!+!++!+!!+!+\");\n\n        this.getAllObject=this.getAllObject.bind(this);\n\n        this.state = { data:[{id:0,name:\"\",\"team\":\"-\"}],\n                       selectedRow:new Set(),\n                       nameTeamForDepressive:'',\n                        sizePage:5,\n                        currentPage:1\n        };\n\n        this.handleChangeTeamNameForDepressive=this.handleChangeTeamNameForDepressive.bind(this);\n    }\n\n    handleChangeTeamNameForDepressive(event){\n        this.setState({nameTeamForDepressive: event.target.value});\n\n    }\n    createCustomDeleteButton = (onClick) => {\n        return (\n            <div className=\"margin\">\n                <label >Name team</label>\n                <input  type=\"text\" value={this.state.nameTeamForDepressive} onChange={this.handleChangeTeamNameForDepressive} />\n                <DeleteButton\n                    size=\"\"\n                    btnText='Make depressive team'\n                    className=\"btn-padding-left-top\"\n                    onClick={ e => {   this.setState(({selectedRow}) => ({selectedRow: new Set()}));\n                        makeDepressiveTeam(this.state.nameTeamForDepressive\n                        ) }}> makeDepressiveTeam</DeleteButton>\n                <br/>\n                <br/>\n            </div>\n        )};\n    componentDidMount() {\n        debugger;\n        this.getAllObject();\n        this.timer = setInterval(() => this.getAllObject(), 100000);\n    }\n    render() {\n        const options = {\n            deleteBtn: this.createCustomDeleteButton,\n            sizePerPage: 5,\n            hideSizePerPage: true\n        };\n\n        return ( <div> <BootstrapTable\n            data={this.state.data}\n            dataField='id'\n            deleteRow={ true }\n            options={ options }\n            pagination\n        >\n            <TableHeaderColumn isKey\n                               dataSort\n                               dataField='id'\n                               headerAlign=\"left\"\n                               width=\"1%\"\n            >\n                ID\n            </TableHeaderColumn>\n\n            <TableHeaderColumn dataField='name'\n                               dataSort\n                               dataAlign='center'\n                               headerAlign=\"center\"\n                               width=\"4%\"\n                               filter={ { type: 'TextFilter' } }\n            >\n                Name\n            </TableHeaderColumn>\n\n                <TableHeaderColumn dataField='team'\n                                   dataSort\n                                   dataAlign='center'\n                                   headerAlign=\"center\"\n                                   width=\"2%\"\n                                   dataFormat={formatterTeam}\n                >\n                    Team\n                </TableHeaderColumn>\n        </BootstrapTable>\n\n            </div>\n        )\n    }\n\n    getAllObject() {\n        axios.get(path_server2+\"all\")\n            .then(res => {\n                const msg = res.data;\n                debugger;\n                if(msg.code ===1){\n                    let k=msg.data;\n                    console.log(\"K=====\"+ k)\n                    this.setState({data: k});\n                    debugger;\n                }\n            }).catch(err => {\n                console.log(err);\n        });\n    }\n\n\n}\n\nexport default withRouter(TableTeams);",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":26},{"ruleId":"71","severity":1,"message":"72","line":30,"column":9,"nodeType":"73","messageId":"74","endLine":58,"endColumn":10},{"ruleId":"75","severity":1,"message":"76","line":66,"column":13,"nodeType":"77","messageId":"78","endLine":66,"endColumn":23},{"ruleId":"75","severity":1,"message":"76","line":70,"column":13,"nodeType":"77","messageId":"78","endLine":70,"endColumn":23},{"ruleId":"75","severity":1,"message":"76","line":76,"column":13,"nodeType":"77","messageId":"78","endLine":76,"endColumn":23},{"ruleId":"75","severity":1,"message":"76","line":80,"column":13,"nodeType":"77","messageId":"78","endLine":80,"endColumn":23},{"ruleId":"75","severity":1,"message":"76","line":86,"column":13,"nodeType":"77","messageId":"78","endLine":86,"endColumn":23},{"ruleId":"75","severity":1,"message":"76","line":90,"column":13,"nodeType":"77","messageId":"78","endLine":90,"endColumn":23},{"ruleId":"67","severity":1,"message":"79","line":9,"column":47,"nodeType":"69","messageId":"70","endLine":9,"endColumn":65},{"ruleId":"67","severity":1,"message":"80","line":82,"column":19,"nodeType":"69","messageId":"70","endLine":82,"endColumn":22},{"ruleId":"67","severity":1,"message":"68","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":26},{"ruleId":"67","severity":1,"message":"81","line":4,"column":8,"nodeType":"69","messageId":"70","endLine":4,"endColumn":20},{"ruleId":"67","severity":1,"message":"82","line":9,"column":9,"nodeType":"69","messageId":"70","endLine":9,"endColumn":25},{"ruleId":"67","severity":1,"message":"83","line":9,"column":27,"nodeType":"69","messageId":"70","endLine":9,"endColumn":39},{"ruleId":"67","severity":1,"message":"84","line":9,"column":41,"nodeType":"69","messageId":"70","endLine":9,"endColumn":48},{"ruleId":"67","severity":1,"message":"85","line":9,"column":70,"nodeType":"69","messageId":"70","endLine":9,"endColumn":81},{"ruleId":"67","severity":1,"message":"86","line":14,"column":8,"nodeType":"69","messageId":"70","endLine":14,"endColumn":10},{"ruleId":"67","severity":1,"message":"87","line":15,"column":9,"nodeType":"69","messageId":"70","endLine":15,"endColumn":15},{"ruleId":"67","severity":1,"message":"88","line":15,"column":17,"nodeType":"69","messageId":"70","endLine":15,"endColumn":22},{"ruleId":"67","severity":1,"message":"89","line":16,"column":8,"nodeType":"69","messageId":"70","endLine":16,"endColumn":16},{"ruleId":"67","severity":1,"message":"90","line":18,"column":9,"nodeType":"69","messageId":"70","endLine":18,"endColumn":13},{"ruleId":"67","severity":1,"message":"91","line":18,"column":15,"nodeType":"69","messageId":"70","endLine":18,"endColumn":23},{"ruleId":"67","severity":1,"message":"92","line":19,"column":8,"nodeType":"69","messageId":"70","endLine":19,"endColumn":21},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'makeDepressiveTeam' is defined but never used.","'msg' is assigned a value but never used.","'InsertButton' is defined but never used.","'onAfterDeleteRow' is defined but never used.","'sendEditCell' is defined but never used.","'addTeam' is defined but never used.","'path_server' is defined but never used.","'qs' is defined but never used.","'Button' is defined but never used.","'Modal' is defined but never used.","'NameForm' is defined but never used.","'CNav' is defined but never used.","'CNavItem' is defined but never used.","'ReactPaginate' is defined but never used.","no-global-assign","no-unsafe-negation"]